# Создайте класс Animal с методом make_sound().
# Затем создайте несколько дочерних классов (например, Dog, Cat, Cow), которые наследуют Animal,
# но изменяют его поведение (метод make_sound()). В конце создайте список содержащий экземпляры этих животных и вызовите make_sound()
# для каждого животного в цикле.

# Создаем базовый (родительский) класс Animal, поэтому в скобках ничего не прописываем и создаем в этом классе функцию make_sound.
class Animal():
    def make_sound(self):
        pass

# Создаем классы Dog, Cat и Cow (в круглых скобках указываем, что класс наследуется от Animal)
# и предопределяем метод, то есть прописываем, что там будет происходить, что будет говорить животное.
class Dog(Animal):
    def make_sound(self):
        print("гав")
class Cat(Animal):
    def make_sound(self):
        print("мяу")
class Cow(Animal):
    def make_sound(self):
        print("мууу")
# Теперь в программе есть один базовый класс и три наследуемых от него класса.
# Также мы изменили метод make_sound для каждого класса отдельно.

# Создаем список, содержащий экземпляры этих животных, и вызываем make_sound для каждого животного в цикле.
# Это можно сделать несколькими способами:
# можно сначала создать экземпляры класса:
# dog = Dog()
# dog — переменная, Dog — класс. F потом собрать их в список;
# можно прописать переменную animals:

animals = [Dog(), Cat(), Cow()]
# При прописывании переменной появляется подсказка, в которой указаны все классы.

# При помощью цикла for перебираем созданный список экземпляров классов:
for animal in animals:
# animals — список экземпляров классов, animal — переменная, в которой сохраняется каждый новый экземпляр класса.
# в программе происходит так:
# animal = Dog → создается экземпляр класса Dog → можно использовать функцию make_sound.
# Используем функцию make_sound для экземпляров, которые будут сохраняться в переменную animal:
    animal.make_sound()
# Дальше, цикл for переключается на следующий элемент, и тогда в переменную animal сохраняется экземпляр следующего класса.
# Получается, что прописана одна строчка, но при этом она для каждого отдельного класса будет все равно срабатывать.
# Здесь работает полиморфизм.